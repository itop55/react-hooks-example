{"version":3,"sources":["reducer.js","context.js","TodoItem.js","TodoList.js","serviceWorker.js","index.js","App.js"],"names":["reducer","state","action","type","concat","Object","toConsumableArray","id","Date","now","title","payload","completed","filter","item","map","Context","React","createContext","TodoItem","_ref","dispatch","useContext","cls","push","react_default","a","createElement","className","join","checked","onChange","onClick","TodoList","todos","console","log","assign","key","Boolean","window","location","hostname","match","ReactDOM","render","_useReducer","useReducer","JSON","parse","localStorage","getItem","_useReducer2","slicedToArray","_useState","useState","_useState2","todoTitle","setTodoTitle","useEffect","setItem","stringify","Provider","value","e","target","onKeyPress","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAAeA,EAAA,SAASC,EAAOC,GAC3B,OAAQA,EAAOC,MACX,IAAK,MACD,SAAAC,OAAAC,OAAAC,EAAA,EAAAD,CACOJ,GADP,CAEI,CACIM,GAAIC,KAAKC,MACTC,MAAOR,EAAOS,QACdC,WAAW,KAGvB,IAAK,aACD,OAAOX,EAAMY,OAAO,SAAAC,GAChB,OAAOA,EAAKP,KAAOL,EAAOS,UAElC,IAAK,aACD,OAAOV,EAAMc,IAAI,SAAAD,GAIb,OAHGA,EAAKP,KAAOL,EAAOS,UAClBG,EAAKF,WAAaE,EAAKF,WAEpBE,IAEf,QACI,OAAOb,ICrBNe,EAAUC,IAAMC,gBCCd,SAASC,EAATC,GAA0C,IAAvBV,EAAuBU,EAAvBV,MAAOH,EAAgBa,EAAhBb,GAAIK,EAAYQ,EAAZR,UAEnCS,EAAaC,qBAAWN,GAAxBK,SAEFE,EAAM,CAAC,QAMb,OAJGX,GACDW,EAAIC,KAAK,aAITC,EAAAC,EAAAC,cAAA,MAAIC,UAAYL,EAAIM,KAAK,MACvBJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACExB,KAAK,WACL2B,QAAUlB,EACVmB,SAAW,kBAAMV,EAAS,CACxBlB,KAAM,aACNQ,QAASJ,OAGbkB,EAAAC,EAAAC,cAAA,YAAOjB,GAEPe,EAAAC,EAAAC,cAAA,KACEC,UAAU,0BACVI,QAAU,kBAAMX,EAAS,CACvBlB,KAAM,aACNQ,QAASJ,MAJb,YCvBO,SAAS0B,EAATb,GAA2B,IAARc,EAAQd,EAARc,MAEhC,OADAC,QAAQC,IAAI,eAAgBF,GAE1BT,EAAAC,EAAAC,cAAA,UACGO,EAAMnB,IAAI,SAAAD,GAAI,OAAIW,EAAAC,EAAAC,cAACR,EAADd,OAAAgC,OAAA,CAAUC,IAAKxB,EAAKP,IAAQO,aCKjCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpB,EAAAC,EAAAC,cCFD,WAAe,IAAAmB,EACFC,qBAAW/C,EAASgD,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAD/DC,EAAA/C,OAAAgD,EAAA,EAAAhD,CAAAyC,EAAA,GACrB7C,EADqBmD,EAAA,GACd/B,EADc+B,EAAA,GAAAE,EAEMC,mBAAS,IAFfC,EAAAnD,OAAAgD,EAAA,EAAAhD,CAAAiD,EAAA,GAErBG,EAFqBD,EAAA,GAEVE,EAFUF,EAAA,GAkB5B,OAdAG,oBAAW,WACTT,aAAaU,QAAQ,QAASZ,KAAKa,UAAU5D,KAC5C,CAACA,IAaAwB,EAAAC,EAAAC,cAACX,EAAQ8C,SAAT,CAAkBC,MAAO,CAAE1C,aACzBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,sBAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SACIxB,KAAK,OACL4D,MAAQN,EACR1B,SAAW,SAAAiC,GAAC,OAAIN,EAAaM,EAAEC,OAAOF,QACtCG,WApBE,SAAAF,GACA,UAAVA,EAAE1B,MACJjB,EAAS,CACPlB,KAAM,MACNQ,QAAS8C,IAEXC,EAAa,QAgBPjC,EAAAC,EAAAC,cAAA,2BAGFF,EAAAC,EAAAC,cAACM,EAAD,CAAUC,MAAQjC,OD/BZ,MAASkE,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d1c3d02e.chunk.js","sourcesContent":["export default function(state, action) {\n    switch (action.type) {\n        case 'add':\n            return [\n                ...state,\n                {\n                    id: Date.now(),\n                    title: action.payload,\n                    completed: false\n                }\n            ]\n        case 'removeTodo':\n            return state.filter(item => {\n                return item.id !== action.payload\n            })\n        case 'toggleTodo':\n            return state.map(item => {\n                if(item.id === action.payload) {\n                    item.completed = !item.completed\n                }\n                return item\n            })\n        default:\n            return state\n    }\n}","import React from 'react'\n\nexport const Context = React.createContext()","import React, { useState, useContext } from 'react'\nimport { Context } from \"./context\"\n\nexport default function TodoItem({title, id, completed}) {\n\n  const { dispatch } = useContext(Context)\n\n  const cls = ['todo']\n\n  if(completed) {\n    cls.push('completed')\n  }\n\n  return (\n    <li className={ cls.join(' ') }>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={ completed }\n          onChange={ () => dispatch({\n            type: 'toggleTodo',\n            payload: id\n          }) }\n        />\n        <span>{title}</span>\n\n        <i\n          className=\"material-icons red-text\"\n          onClick={ () => dispatch({\n            type: 'removeTodo',\n            payload: id\n          }) }\n        >\n          delete\n        </i>\n      </label>\n    </li>\n  )\n}","import React from 'react'\nimport TodoItem from './TodoItem'\n\nexport default function TodoList({todos}) {\n  console.log(\"todos\", typeof todos)\n  return (\n    <ul>\n      {todos.map(item => <TodoItem key={item.id} {...item} />)}\n    </ul>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React, { useState, useEffect, useReducer } from 'react'\nimport reducer from './reducer'\nimport { Context } from './context'\nimport TodoList from './TodoList'\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, JSON.parse(localStorage.getItem(\"todos\")) || [])\n  const [todoTitle, setTodoTitle] = useState('')\n\n  useEffect( ()=> {\n    localStorage.setItem(\"todos\", JSON.stringify(state))\n  }, [state])\n\n  const addTodo = e => {\n    if (e.key === 'Enter') {\n      dispatch({\n        type: 'add',\n        payload: todoTitle\n      })\n      setTodoTitle('')\n    }\n  }\n\n  return (\n      <Context.Provider value={{ dispatch }}>\n        <div className=\"container\">\n          <h1>Todo app</h1>\n\n          <div className=\"input-field\">\n            <input\n                type=\"text\"\n                value={ todoTitle }\n                onChange={ e => setTodoTitle(e.target.value) }\n                onKeyPress={addTodo}\n            />\n            <label>Todo name</label>\n          </div>\n\n          <TodoList todos={ state } />\n        </div>\n      </Context.Provider>\n  );\n}"],"sourceRoot":""}