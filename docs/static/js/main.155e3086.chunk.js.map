{"version":3,"sources":["TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_ref","title","id","completed","react_default","a","createElement","className","type","defaultChecked","TodoList","todos","map","item","Object","assign","key","App","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAEe,SAASA,EAATC,GAA0C,IAAvBC,EAAuBD,EAAvBC,MAAuBD,EAAhBE,GAAgBF,EAAZG,UAC3C,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACZH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACEE,KAAK,WACLC,gBAAgB,IAElBL,EAAAC,EAAAC,cAAA,YAAOL,GAEPG,EAAAC,EAAAC,cAAA,KACEC,UAAU,2BADZ,YCTO,SAASG,EAATV,GAA2B,IAARW,EAAQX,EAARW,MAChC,OACEP,EAAAC,EAAAC,cAAA,UACGK,EAAMC,IAAI,SAAAC,GAAI,OAAIT,EAAAC,EAAAC,cAACP,EAADe,OAAAC,OAAA,CAAUC,IAAKH,EAAKX,IAAQW,WCHhCI,6MACnBC,MAAQ,CACNP,MAAO,CACL,CAACT,GAAI,EAAGD,MAAO,aAAcE,WAAW,GACxC,CAACD,GAAI,EAAGD,MAAO,cAAeE,WAAW,6EAK3C,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SACZJ,EAAAC,EAAAC,cAAA,2BAGFF,EAAAC,EAAAC,cAACI,EAAD,CAAUC,MAAOQ,KAAKD,MAAMP,gBAlBLS,mBCSbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.155e3086.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function TodoItem({title, id, completed}) {\n  return (\n    <li className=\"todo\">\n      <label>\n        <input\n          type=\"checkbox\"\n          defaultChecked={false}\n        />\n        <span>{title}</span>\n\n        <i\n          className=\"material-icons red-text\"\n        >\n          delete\n        </i>\n      </label>\n    </li>\n  )\n}","import React from 'react'\nimport TodoItem from './TodoItem'\n\nexport default function TodoList({todos}) {\n  return (\n    <ul>\n      {todos.map(item => <TodoItem key={item.id} {...item} />)}\n    </ul>\n  )\n}","import React, { Component } from 'react'\nimport TodoList from './TodoList'\n\nexport default class App extends Component {\n  state = {\n    todos: [\n      {id: 1, title: 'First todo', completed: false},\n      {id: 2, title: 'Second todo', completed: true},\n    ]\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Todo app</h1>\n\n          <div className=\"input-field\">\n            <input type=\"text\" />\n            <label>Todo name</label>\n          </div>\n\n          <TodoList todos={this.state.todos} />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}